workshop:~/environment $ curl https://raw.githubusercontent.com/technovangelist/aws-datadog-workshop-sourcefiles/main/install.sh | bash
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  5068  100  5068    0     0  21579      0 --:--:-- --:--:-- --:--:-- 21658
Cloning into '/home/ec2-user/sourcefiles'...
remote: Enumerating objects: 707, done.
remote: Counting objects: 100% (707/707), done.
remote: Compressing objects: 100% (518/518), done.
remote: Total 707 (delta 190), reused 667 (delta 150), pack-reused 0
Receiving objects: 100% (707/707), 5.76 MiB | 15.17 MiB/s, done.
Resolving deltas: 100% (190/190), done.

added 1 package, and audited 2 packages in 862ms

found 0 vulnerabilities
Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
244 packages excluded due to repository priority protections
Package terraform-1.5.5-1.x86_64 already installed and latest version
Nothing to do
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 47.5M  100 47.5M    0     0  87.3M      0 --:--:-- --:--:-- --:--:-- 87.4M
Downloading https://get.helm.sh/helm-v3.12.3-linux-amd64.tar.gz
Verifying checksum... Done.
Preparing to install helm into /usr/local/bin
helm installed into /usr/local/bin/helm
"datadog" has been added to your repositories
"stable" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "datadog" chart repository
...Successfully got an update from the "stable" chart repository
Update Complete. ⎈Happy Helming!⎈
Generating public/private rsa key pair.
Your identification has been saved in /home/ec2-user/.ssh/workshop.
Your public key has been saved in /home/ec2-user/.ssh/workshop.pub.
The key fingerprint is:
SHA256:gmAkVuEIgGpftnAfWIiuwT2aDOMH9hUy126RFla9DNQ ec2-user@ip-172-31-46-120.us-west-2.compute.internal
The key's randomart image is:
+---[RSA 2048]----+
|*.ooo oo=oo      |
|+oo+ +.* . E     |
|o.=.+ * . o .    |
|+B * B +   o     |
|*.O O = S        |
| * + . o         |
|  .              |
|                 |
|                 |
+----[SHA256]-----+
{
    "Group": {
        "Path": "/",
        "GroupName": "kops",
        "GroupId": "AGPAYULWPGLT4XHIEONUV",
        "Arn": "arn:aws:iam::593490817767:group/kops",
        "CreateDate": "2023-08-22T03:11:04+00:00"
    }
}
{
    "User": {
        "Path": "/",
        "UserName": "kops",
        "UserId": "AIDAYULWPGLTZEDSF2STY",
        "Arn": "arn:aws:iam::593490817767:user/kops",
        "CreateDate": "2023-08-22T03:11:10+00:00"
    }
}

An error occurred (BucketAlreadyExists) when calling the CreateBucket operation: The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again.

An error occurred (AccessDenied) when calling the PutBucketVersioning operation: Access Denied

An error occurred (AccessDenied) when calling the PutBucketEncryption operation: Access Denied
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100  173M  100  173M    0     0  57.8M      0  0:00:02  0:00:02 --:--:-- 65.6M
workshop-c246fc.k8s.local
Error: error creating cluster: error writing Cluster "workshop-c246fc.k8s.local": error writing configuration file s3://workshop-state-store-c246fc/workshop-c246fc.k8s.local/config: Could not retrieve location for AWS bucket workshop-state-store-c246fc
Error: error reading cluster configuration: error reading cluster configuration "workshop-c246fc.k8s.local": error reading s3://workshop-state-store-c246fc/workshop-c246fc.k8s.local/config: Could not retrieve location for AWS bucket workshop-state-store-c246fc
Error: error reading cluster configuration: error reading cluster configuration "workshop-c246fc.k8s.local": error reading s3://workshop-state-store-c246fc/workshop-c246fc.k8s.local/config: Could not retrieve location for AWS bucket workshop-state-store-c246fc

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching "~> 3.34"...
- Finding latest version of hashicorp/null...
- Installing hashicorp/aws v3.76.1...
- Installed hashicorp/aws v3.76.1 (signed by HashiCorp)
- Installing hashicorp/null v3.2.1...
- Installed hashicorp/null v3.2.1 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.advertisements will be created
  + resource "aws_instance" "advertisements" {
      + ami                                  = "ami-02701bcdc5509e57b"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "us-west-2b"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.small"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ecommerceapp"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name"  = "ecm-advertisements"
          + "Owner" = "datadogworkshop"
        }
      + tags_all                             = {
          + "Name"  = "ecm-advertisements"
          + "Owner" = "datadogworkshop"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (sensitive value)
      + user_data_base64                     = (known after apply)
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_instance.db will be created
  + resource "aws_instance" "db" {
      + ami                                  = "ami-02701bcdc5509e57b"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "us-west-2b"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.small"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ecommerceapp"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name"  = "ecm-db"
          + "Owner" = "datadogworkshop"
        }
      + tags_all                             = {
          + "Name"  = "ecm-db"
          + "Owner" = "datadogworkshop"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (sensitive value)
      + user_data_base64                     = (known after apply)
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_instance.discounts will be created
  + resource "aws_instance" "discounts" {
      + ami                                  = "ami-02701bcdc5509e57b"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "us-west-2b"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.small"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ecommerceapp"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name"  = "ecm-discounts"
          + "Owner" = "datadogworkshop"
        }
      + tags_all                             = {
          + "Name"  = "ecm-discounts"
          + "Owner" = "datadogworkshop"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (sensitive value)
      + user_data_base64                     = (known after apply)
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_instance.frontend will be created
  + resource "aws_instance" "frontend" {
      + ami                                  = "ami-0def4a8d8d8395506"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "us-west-2b"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.small"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ecommerceapp"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name"  = "ecm-frontend"
          + "Owner" = "datadogworkshop"
        }
      + tags_all                             = {
          + "Name"  = "ecm-frontend"
          + "Owner" = "datadogworkshop"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (sensitive value)
      + user_data_base64                     = (known after apply)
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_internet_gateway.ecommerceapp-igw will be created
  + resource "aws_internet_gateway" "ecommerceapp-igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name"  = "ecommerceapp"
          + "Owner" = "datadogworkshop"
        }
      + tags_all = {
          + "Name"  = "ecommerceapp"
          + "Owner" = "datadogworkshop"
        }
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.ecommerceapp-key will be created
  + resource "aws_key_pair" "ecommerceapp-key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "ecommerceapp"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDTB0Ip2YNIh+5IA6zNj+FXQ3+jdkzxMSc40S851zkq+zxxE69Gj8xUKfYJPm8X9m+of800zJnvVHTWFeKpq2wOmrQrrzD3XLfGGr+1LPBpFbIzx9nZacHw0KIIiPGpOTAwZmBtLNDmNv5eIUpGp6z66IrE8fpqBBv5hmpeX+1cbceafQ7AJ0dxDBX9bfYrxLNgV4lwyE8urO1AzQN42w2EO18rLQulFXGWHnSpmPwrQnG2SlaOmDubbK0FdnaG2yZthRyf8Ex98uxXM7SD7vDCTVKzU+BwXqVOHKGp/qtzOX2XDPqTYBXF/OIikRvGkuLIBSR0FZ3e6RM6J3yDOtaR ec2-user@ip-172-31-46-120.us-west-2.compute.internal"
      + tags_all        = (known after apply)
    }

  # aws_route_table.ecommerceapp-crt will be created
  + resource "aws_route_table" "ecommerceapp-crt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name"  = "ecommerceapp"
          + "Owner" = "datadogworkshop"
        }
      + tags_all         = {
          + "Name"  = "ecommerceapp"
          + "Owner" = "datadogworkshop"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.ecommerceapp-crta-subnet will be created
  + resource "aws_route_table_association" "ecommerceapp-crta-subnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.ecommerceapp-sg will be created
  + resource "aws_security_group" "ecommerceapp-sg" {
      + arn                    = (known after apply)
      + description            = "Security group created for ecommerceapp on EC2"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3000
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "10.0.1.0/24",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 65535
            },
        ]
      + name                   = "ecommerceapp-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"  = "ecommerceapp"
          + "Owner" = "datadogworkshop"
        }
      + tags_all               = {
          + "Name"  = "ecommerceapp"
          + "Owner" = "datadogworkshop"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.ecommerceapp-subnet will be created
  + resource "aws_subnet" "ecommerceapp-subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"  = "ecommerceapp"
          + "Owner" = "datadogworkshop"
        }
      + tags_all                                       = {
          + "Name"  = "ecommerceapp"
          + "Owner" = "datadogworkshop"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.ecommerceapp-vpc will be created
  + resource "aws_vpc" "ecommerceapp-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name"  = "ecommerceapp"
          + "Owner" = "datadogworkshop"
        }
      + tags_all                             = {
          + "Name"  = "ecommerceapp"
          + "Owner" = "datadogworkshop"
        }
    }

  # null_resource.setup will be created
  + resource "null_resource" "setup" {
      + id = (known after apply)
    }

Plan: 12 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + URL_for_site                   = (known after apply)
  + instance_id_for_advertisements = (known after apply)
  + instance_id_for_db             = (known after apply)
  + instance_id_for_discounts      = (known after apply)
  + instance_id_for_frontend       = (known after apply)
  + ssh_to_advertisements          = (known after apply)
  + ssh_to_db                      = (known after apply)
  + ssh_to_discounts               = (known after apply)
  + ssh_to_frontend                = (known after apply)
null_resource.setup: Creating...
null_resource.setup: Provisioning with 'local-exec'...
null_resource.setup (local-exec): Executing: ["/bin/sh" "-c" "rm internalhostsfile;rm run.sh;cp runshtemplate run.sh;chmod +x run.sh"]
null_resource.setup (local-exec): rm: cannot remove ‘internalhostsfile’: No such file or directory
null_resource.setup (local-exec): rm: cannot remove ‘run.sh’: No such file or directory
null_resource.setup: Creation complete after 0s [id=2916911663722215560]
aws_vpc.ecommerceapp-vpc: Creating...
aws_key_pair.ecommerceapp-key: Creating...
aws_key_pair.ecommerceapp-key: Creation complete after 0s [id=ecommerceapp]
aws_vpc.ecommerceapp-vpc: Still creating... [10s elapsed]
aws_vpc.ecommerceapp-vpc: Creation complete after 11s [id=vpc-085a3bb72b08f767e]
aws_internet_gateway.ecommerceapp-igw: Creating...
aws_subnet.ecommerceapp-subnet: Creating...
aws_internet_gateway.ecommerceapp-igw: Creation complete after 1s [id=igw-097c70445e4b21dde]
aws_route_table.ecommerceapp-crt: Creating...
aws_route_table.ecommerceapp-crt: Creation complete after 0s [id=rtb-09bf28dece5791fcf]
aws_subnet.ecommerceapp-subnet: Still creating... [10s elapsed]
aws_subnet.ecommerceapp-subnet: Creation complete after 11s [id=subnet-06bd29fdbd9c253bd]
aws_route_table_association.ecommerceapp-crta-subnet: Creating...
aws_security_group.ecommerceapp-sg: Creating...
aws_route_table_association.ecommerceapp-crta-subnet: Creation complete after 0s [id=rtbassoc-0c1523675e522c517]
aws_security_group.ecommerceapp-sg: Creation complete after 2s [id=sg-0776c7d06ecb1b6c8]
aws_instance.advertisements: Creating...
aws_instance.discounts: Creating...
aws_instance.frontend: Creating...
aws_instance.db: Creating...
aws_instance.advertisements: Still creating... [10s elapsed]
aws_instance.discounts: Still creating... [10s elapsed]
aws_instance.frontend: Still creating... [10s elapsed]
aws_instance.db: Still creating... [10s elapsed]
aws_instance.advertisements: Still creating... [20s elapsed]
aws_instance.discounts: Still creating... [20s elapsed]
aws_instance.frontend: Still creating... [20s elapsed]
aws_instance.db: Still creating... [20s elapsed]
aws_instance.advertisements: Still creating... [30s elapsed]
aws_instance.discounts: Still creating... [30s elapsed]
aws_instance.frontend: Still creating... [30s elapsed]
aws_instance.db: Still creating... [30s elapsed]
aws_instance.advertisements: Provisioning with 'local-exec'...
aws_instance.advertisements (local-exec): Executing: ["/bin/sh" "-c" "./setuphosts.sh 10.0.1.213 18.236.131.45 ubuntu advertisements"]
aws_instance.discounts: Provisioning with 'local-exec'...
aws_instance.discounts (local-exec): Executing: ["/bin/sh" "-c" "./setuphosts.sh 10.0.1.194 54.149.155.22 ubuntu discounts"]
aws_instance.db: Provisioning with 'local-exec'...
aws_instance.db (local-exec): Executing: ["/bin/sh" "-c" "./setuphosts.sh 10.0.1.251 52.11.84.62 ubuntu db"]
aws_instance.db: Creation complete after 31s [id=i-0a5371c985e9e2035]
aws_instance.advertisements: Creation complete after 31s [id=i-02c496fd2a216132e]
aws_instance.frontend: Provisioning with 'local-exec'...
aws_instance.frontend (local-exec): Executing: ["/bin/sh" "-c" "./setuphosts.sh 10.0.1.22 52.42.62.127 bitnami frontend"]
aws_instance.discounts: Creation complete after 32s [id=i-0b6e51d864077be64]
aws_instance.frontend: Creation complete after 32s [id=i-00bae34b636b90c5c]

Apply complete! Resources: 12 added, 0 changed, 0 destroyed.

Outputs:

URL_for_site = "http://52.42.62.127:3000"
instance_id_for_advertisements = "i-02c496fd2a216132e"
instance_id_for_db = "i-0a5371c985e9e2035"
instance_id_for_discounts = "i-0b6e51d864077be64"
instance_id_for_frontend = "i-00bae34b636b90c5c"
ssh_to_advertisements = "ssh -i ./ecommerceapp ubuntu@18.236.131.45"
ssh_to_db = "ssh -i ./ecommerceapp ubuntu@52.11.84.62"
ssh_to_discounts = "ssh -i ./ecommerceapp ubuntu@54.149.155.22"
ssh_to_frontend = "ssh -i ./ecommerceapp bitnami@52.42.62.127"
ssh: connect to host 18.236.131.45 port 22: Connection refused
ssh: connect to host 18.236.131.45 port 22: Connection refused
Warning: Permanently added '18.236.131.45' (ECDSA) to the list of known hosts.

internalhostsfile                                                                                                       100%   80    66.0KB/s   00:00    
Warning: Permanently added '54.149.155.22' (ECDSA) to the list of known hosts.

internalhostsfile                                                                                                       100%   80    78.7KB/s   00:00    
Warning: Permanently added '52.11.84.62' (ECDSA) to the list of known hosts.

internalhostsfile                                                                                                       100%   80    78.1KB/s   00:00    
ssh: connect to host 52.42.62.127 port 22: Connection refused
ssh: connect to host 52.42.62.127 port 22: Connection refused
ssh: connect to host 52.42.62.127 port 22: Connection refused
ssh: connect to host 52.42.62.127 port 22: Connection refused
ssh: connect to host 52.42.62.127 port 22: Connection refused
ssh: connect to host 52.42.62.127 port 22: Connection refused
ssh: connect to host 52.42.62.127 port 22: Connection refused
ssh: connect to host 52.42.62.127 port 22: Connection refused
Warning: Permanently added '52.42.62.127' (ECDSA) to the list of known hosts.

internalhostsfile   